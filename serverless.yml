service: bertly

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-log-forwarding
  - serverless-wsgi

custom:
  domainEnabled:
    dev: false
    qa: false
    prod: true
  wsgi:
    app: bertly.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  customDomain:
    domainName: dosome.click
    basePath: ''
    stage: ${opt:stage}
    createRoute53Record: true
    enabled: ${self:custom.domainEnabled.${opt:stage}}
  logForwarding:
    destinationARN: ${cf:lambda-papertrail-${opt:stage}.ForwarderLambdaArn}

package:
  exclude:
    - node_modules/**
    - venv/**

provider:
  name: aws
  runtime: python2.7
  region: us-east-1
  environment:
    BERTLY_API_KEY: ${ssm:/bertly/${opt:stage}/api-key~true}
    BERTLY_API_KEY_NAME: 'X-BERTLY-API-KEY'
    CLICK_TABLE: 'clicks'
    COMPOSE_REDIS_URL: ${ssm:/bertly/${opt:stage}/redis-url~true}
    POSTGRESQL_USER: ${ssm:/bertly/${opt:stage}/postgres-user}
    POSTGRESQL_PASSWORD: ${ssm:/bertly/${opt:stage}/postgres-password~true}
    POSTGRESQL_DB: 'bertly_clicks'
    POSTGRESQL_HOST:
      Fn::GetAtt: [BertlyRDSCluster, 'Endpoint.Address']
    POSTGRESQL_PORT:
      Fn::GetAtt: [BertlyRDSCluster, 'Endpoint.Port']
  vpc:
    securityGroupIds:
      - Fn::GetAtt: BertlySecurityGroup.GroupId
    subnetIds:
      - Ref: BertlyPrivateSubnetA

functions:
  app:
    handler: wsgi.handler
    timeout: 15
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  migrate:
    handler: migrate.run

resources:
  Resources:
    BertlyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '10.0.0.0/16'
    BertlyElasticIp:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    BertlyInternetGateway:
      Type: AWS::EC2::InternetGateway
    BertlyVPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: BertlyVPC
        InternetGatewayId:
          Ref: BertlyInternetGateway
    BertlyPublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: BertlyVPC
    BertlyPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: BertlyPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: BertlyInternetGateway
    BertlyNatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt: BertlyElasticIp.AllocationId
        SubnetId:
          Ref: BertlyPublicSubnetA
    BertlyPrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: BertlyVPC 
    BertlyPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: BertlyPrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: BertlyNatGateway
    BertlySubnetRouteTableAssociationPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: BertlyPublicSubnetA
        RouteTableId:
          Ref: BertlyPublicRouteTable
    BertlyPublicSubnetA:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: '10.0.1.0/24'
    BertlySubnetRouteTableAssociationPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: BertlyPrivateSubnetA
        RouteTableId:
          Ref: BertlyPrivateRouteTable
    BertlyPrivateSubnetA:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: '10.0.2.0/24'
    BertlySubnetRouteTableAssociationPrivateB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: BertlyPrivateSubnetB
        RouteTableId:
          Ref: BertlyPrivateRouteTable
    BertlyPrivateSubnetB:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: '10.0.3.0/24'
    BertlySecurityGroup:
      DependsOn: BertlyVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Bertly Functions
        VpcId:
          Ref: BertlyVPC
    BertlyStorageSecurityGroup:
      DependsOn: BertlyVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Bertly Redis & RDS
        VpcId:
          Ref: BertlyVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          Description: 'Allow access to RDS Postgres database.'
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: BertlySecurityGroup
    BertlyRDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: 'RDS Subnet Group'
        SubnetIds:
        - Ref: BertlyPrivateSubnetA
        - Ref: BertlyPrivateSubnetB
    BertlyQuasarDBParameterGroup:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: 'Allow logical replication from Bertly to Quasar.'
        Family: 'postgres10'
        Parameters:
          max_logical_replication_workers: 500
          rds.logical_replication: 1
    BertlyRDSCluster:
      DependsOn: BertlyStorageSecurityGroup
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: Postgres 
        EngineVersion: '10.3'
        DBName: 'bertly_clicks'
        AllocatedStorage: 100
        DBInstanceClass: db.t2.medium
        MasterUsername: ${ssm:/bertly/${opt:stage}/postgres-user}
        MasterUserPassword: ${ssm:/bertly/${opt:stage}/postgres-password~true}
        VPCSecurityGroups:
        - Fn::GetAtt: BertlyStorageSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: BertlyRDSSubnetGroup
        DBParameterGroupName:
          Ref: BertlyQuasarDBParameterGroup
