service: bertly

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-wsgi

custom:
  domainEnabled:
    dev: false
    qa: false
    prod: true
  wsgi:
    app: bertly.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  customDomain:
    domainName: dosome.click
    basePath: ''
    stage: ${opt:stage}
    createRoute53Record: true
    enabled: ${self:custom.domainEnabled.${opt:stage}}

package:
  exclude:
    - node_modules/**
    - venv/**

provider:
  name: aws
  runtime: python2.7
  region: us-east-1
  environment:
    BERTLY_API_KEY: ${ssm:/bertly/${opt:stage}/api-key~true}
    POSTGRESQL_USER: ${ssm:/bertly/${opt:stage}/postgres-user}
    POSTGRESQL_PASSWORD: ${ssm:/bertly/${opt:stage}/postgres-password~true}
    POSTGRESQL_DB: 'bertly_clicks'
    POSTGRESQL_HOST:
      'Fn::GetAtt': [BertlyRDSCluster, 'Endpoint.Address']
    POSTGRESQL_PORT:
      'Fn::GetAtt': [BertlyRDSCluster, 'Endpoint.Port']
    REDIS_HOST:
      'Fn::GetAtt': [BertlyElasticacheCluster, 'RedisEndpoint.Address']
    REDIS_PORT:
      'Fn::GetAtt': [BertlyElasticacheCluster, 'RedisEndpoint.Port']
  vpc:
    securityGroupIds:
      - 'Fn::GetAtt': BertlySecurityGroup.GroupId
    subnetIds:
      - Ref: BertlySubnetA
      - Ref: BertlySubnetB
      - Ref: BertlySubnetC

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  migrate:
    handler: migrate.run

resources:
  Resources:
    BertlyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '10.0.0.0/16'
    BertlySubnetA:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: '10.0.0.0/24'
    BertlySubnetB:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: '10.0.1.0/24'
    BertlySubnetC:
      DependsOn: BertlyVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: BertlyVPC
        AvailabilityZone: ${self:provider.region}d
        CidrBlock: '10.0.2.0/24'
    BertlySecurityGroup:
      DependsOn: BertlyVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Bertly Functions
        VpcId:
          Ref: BertlyVPC
    BertlyStorageSecurityGroup:
      DependsOn: BertlyVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Bertly Redis & RDS
        VpcId:
          Ref: BertlyVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: BertlySecurityGroup
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: BertlySecurityGroup
    BertlyRDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: 'RDS Subnet Group'
        SubnetIds:
        - Ref: BertlySubnetA
        - Ref: BertlySubnetB
        - Ref: BertlySubnetC
    BertlyRDSCluster:
      DependsOn: BertlyStorageSecurityGroup
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: Postgres 
        EngineVersion: '10.3'
        DBName: 'bertly_clicks'
        AllocatedStorage: 10
        DBInstanceClass: db.t2.small
        MasterUsername: ${ssm:/bertly/${opt:stage}/postgres-user}
        MasterUserPassword: ${ssm:/bertly/${opt:stage}/postgres-password~true}
        VPCSecurityGroups:
        - 'Fn::GetAtt': BertlyStorageSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: BertlyRDSSubnetGroup
    BertlyElasticacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: 'Cache Subnet Group'
        SubnetIds:
        - Ref: BertlySubnetA
        - Ref: BertlySubnetB
        - Ref: BertlySubnetC
    BertlyElasticacheCluster:
      DependsOn: BertlyStorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        Engine: redis
        NumCacheNodes: 1
        CacheNodeType: cache.r4.large
        VpcSecurityGroupIds:
        - 'Fn::GetAtt': BertlyStorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: BertlyElasticacheSubnetGroup
